// Generated by CoffeeScript 2.7.0
//###########################################################
import * as h from "./secretmanagementhandlers";

//###########################################################
export var openSecretSpace = async function(req, res) {
  var err, response;
  try {
    response = (await h.openSecretSpace(req.body.authCode, req.body.publicKey, req.body.closureDate, req.body.timestamp, req.body.signature, req.body.nonce));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var deleteSecretSpace = async function(req, res) {
  var err, response;
  try {
    response = (await h.deleteSecretSpace(req.body.publicKey, req.body.timestamp, req.body.signature, req.body.nonce));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var getSecretSpace = async function(req, res) {
  var err, response;
  try {
    response = (await h.getSecretSpace(req.body.publicKey, req.body.timestamp, req.body.signature, req.body.nonce));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var setSecret = async function(req, res) {
  var err, response;
  try {
    response = (await h.setSecret(req.body.publicKey, req.body.secretId, req.body.secret, req.body.timestamp, req.body.signature, req.body.nonce));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var getSecret = async function(req, res) {
  var err, response;
  try {
    response = (await h.getSecret(req.body.publicKey, req.body.secretId, req.body.timestamp, req.body.signature, req.body.nonce));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var deleteSecret = async function(req, res) {
  var err, response;
  try {
    response = (await h.deleteSecret(req.body.publicKey, req.body.secretId, req.body.timestamp, req.body.signature, req.body.nonce));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var openSubSpace = async function(req, res) {
  var err, response;
  try {
    response = (await h.openSubSpace(req.body.publicKey, req.body.fromId, req.body.closureDate, req.body.timestamp, req.body.signature, req.body.nonce));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var getSubSpace = async function(req, res) {
  var err, response;
  try {
    response = (await h.getSubSpace(req.body.publicKey, req.body.fromId, req.body.timestamp, req.body.signature, req.body.nonce));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var deleteSubSpace = async function(req, res) {
  var err, response;
  try {
    response = (await h.deleteSubSpace(req.body.publicKey, req.body.fromId, req.body.timestamp, req.body.signature, req.body.nonce));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var shareSecretTo = async function(req, res) {
  var err, response;
  try {
    response = (await h.shareSecretTo(req.body.publicKey, req.body.shareToId, req.body.secretId, req.body.secret, req.body.oneTimeSecret, req.body.timestamp, req.body.signature, req.body.nonce));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var getSecretFrom = async function(req, res) {
  var err, response;
  try {
    response = (await h.getSecretFrom(req.body.publicKey, req.body.fromId, req.body.secretId, req.body.timestamp, req.body.signature, req.body.nonce));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var deleteSharedSecret = async function(req, res) {
  var err, response;
  try {
    response = (await h.deleteSharedSecret(req.body.publicKey, req.body.sharedToId, req.body.secretId, req.body.timestamp, req.body.signature, req.body.nonce));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var addNotificationHook = async function(req, res) {
  var err, response;
  try {
    response = (await h.addNotificationHook(req.body.publicKey, req.body.type, req.body.targetId, req.body.notifyURL, req.body.timestamp, req.body.signature, req.body.nonce));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var getNotificationHooks = async function(req, res) {
  var err, response;
  try {
    response = (await h.getNotificationHooks(req.body.publicKey, req.body.targetId, req.body.timestamp, req.body.signature, req.body.nonce));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var deleteNotificationHook = async function(req, res) {
  var err, response;
  try {
    response = (await h.deleteNotificationHook(req.body.publicKey, req.body.notificationHookId, req.body.timestamp, req.body.signature, req.body.nonce));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var createAuthCode = async function(req, res) {
  var err, response;
  try {
    response = (await h.createAuthCode(req.body.publicKey, req.body.timestamp, req.body.signature, req.body.nonce));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var setRequestableServer = async function(req, res) {
  var err, response;
  try {
    response = (await h.setRequestableServer(req.body.authCode, req.body.serverURL, req.body.serverNodeId));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};

//###########################################################
export var getNodeId = async function(req, res) {
  var err, response;
  try {
    response = (await h.getNodeId(req.body.authCode));
    res.send(response);
  } catch (error) {
    err = error;
    res.send({
      error: err.stack
    });
  }
};
