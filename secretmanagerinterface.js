// Generated by CoffeeScript 2.6.1
//###########################################################
//region checkResponse
var checkOKResponse, checkReturnedSecret;

checkOKResponse = function(response, route) {
  var msg;
  if (response.ok) {
    return;
  }
  if (response.error) {
    throw new Error(response.error);
  }
  msg = route + " - Unexpected Response: " + JSON.stringify(response);
  throw new Error(msg);
};

checkReturnedSecret = function(response, route) {
  var msg;
  if ((response.referencePoint != null) && (response.encryptedContent != null)) {
    return;
  }
  if (response.error) {
    throw new Error(response.error);
  }
  msg = route + " - Unexpected Response: " + JSON.stringify(response);
  throw new Error(msg);
};

//endregion

//###########################################################
export var addNodeId = async function(serverURL, publicKey, timestamp, signature) {
  var payload, response, route, url;
  route = "/addNodeId";
  payload = {publicKey, timestamp, signature};
  url = serverURL + route;
  response = (await this.postData(url, payload));
  checkOKResponse(response, route);
};

//###########################################################
export var getSecretSpace = async function(serverURL, publicKey, timestamp, signature) {
  var payload, response, route, url;
  route = "/getSecretSpace";
  payload = {publicKey, timestamp, signature};
  url = serverURL + route;
  response = (await this.postData(url, payload));
  checkReturnedSecret(response, route);
  return response;
};

export var getSecret = async function(serverURL, publicKey, secretId, timestamp, signature) {
  var payload, response, route, url;
  route = "/getSecret";
  payload = {publicKey, secretId, timestamp, signature};
  url = serverURL + route;
  response = (await this.postData(url, payload));
  checkReturnedSecret(response, route);
  return response;
};

//###########################################################
export var setSecret = async function(serverURL, publicKey, secretId, secret, timestamp, signature) {
  var payload, response, route, url;
  route = "/setSecret";
  payload = {publicKey, secretId, secret, timestamp, signature};
  url = serverURL + route;
  response = (await this.postData(url, payload));
  checkOKResponse(response, route);
};

export var deleteSecret = async function(serverURL, publicKey, secretId, timestamp, signature) {
  var payload, response, route, url;
  route = "/deleteSecret";
  payload = {publicKey, secretId, timestamp, signature};
  url = serverURL + route;
  response = (await this.postData(url, payload));
  checkOKResponse(response, route);
};

//###########################################################
export var startAcceptingSecretsFrom = async function(serverURL, publicKey, fromId, timestamp, signature) {
  var payload, response, route, url;
  route = "/startAcceptingSecretsFrom";
  payload = {publicKey, fromId, timestamp, signature};
  url = serverURL + route;
  response = (await this.postData(url, payload));
  checkOKResponse(response, route);
};

export var stopAcceptingSecretsFrom = async function(serverURL, publicKey, fromId, timestamp, signature) {
  var payload, response, route, url;
  route = "/stopAcceptingSecretsFrom";
  payload = {publicKey, fromId, timestamp, signature};
  url = serverURL + route;
  response = (await this.postData(url, payload));
  checkOKResponse(response, route);
};

//###########################################################
export var shareSecretTo = async function(serverURL, publicKey, shareToId, secretId, secret, timestamp, signature) {
  var payload, response, route, url;
  route = "/shareSecretTo";
  payload = {publicKey, shareToId, secretId, secret, timestamp, signature};
  url = serverURL + route;
  response = (await this.postData(url, payload));
  checkOKResponse(response, route);
};

export var deleteSharedSecret = async function(serverURL, publicKey, sharedToId, secretId, timestamp, signature) {
  var payload, response, route, url;
  route = "/deleteSharedSecret";
  payload = {publicKey, sharedToId, secretId, timestamp, signature};
  url = serverURL + route;
  response = (await this.postData(url, payload));
  checkOKResponse(response, route);
};

//endregion
