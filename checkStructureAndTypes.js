// Generated by CoffeeScript 2.7.0
//###########################################################
// types Enumeration
var assertionFunctions, c, hexChars, hexMap, j, len;

export var NUMBER = 0;

export var STRING = 1;

export var STRINGHEX = 2;

export var STRINGHEX32 = 3;

export var STRINGHEX64 = 4;

export var STRINGHEX128 = 5;

export var BOOLEAN = 6;

export var ARRAY = 7;

export var NUMBERORNULL = 8;

export var STRINGORNULL = 9;

//###########################################################
assertionFunctions = new Array(10);

//###########################################################
//region hexHelpers
hexChars = "0123456789abcdefABCDEF";

hexMap = {};

for (j = 0, len = hexChars.length; j < len; j++) {
  c = hexChars[j];
  hexMap[c] = true;
}

//endregion

//###########################################################
//region all Assertion Functions
assertionFunctions[NUMBER] = function(arg) {
  if (typeof arg !== "number") {
    throw new Error("Not a number!");
  }
};

assertionFunctions[STRING] = function(arg) {
  if (typeof arg !== "string") {
    throw new Error("Not a string!");
  }
};

assertionFunctions[STRINGHEX] = function(arg) {
  var k, len1;
  if (typeof arg !== "string") {
    throw new Error("Not a string!");
  }
  for (k = 0, len1 = arg.length; k < len1; k++) {
    c = arg[k];
    if (hexMap[c] == null) {
      throw new Error("Not a HexString!");
    }
  }
};

assertionFunctions[STRINGHEX32] = function(arg) {
  var k, len1;
  if (typeof arg !== "string") {
    throw new Error("Not a string!");
  }
  for (k = 0, len1 = arg.length; k < len1; k++) {
    c = arg[k];
    if (hexMap[c] == null) {
      throw new Error("Not a HexString!");
    }
  }
  if (arg.length !== 32) {
    throw new Error("HexString length was not 32 characters!");
  }
};

assertionFunctions[STRINGHEX64] = function(arg) {
  var k, len1;
  if (typeof arg !== "string") {
    throw new Error("Not a string!");
  }
  for (k = 0, len1 = arg.length; k < len1; k++) {
    c = arg[k];
    if (hexMap[c] == null) {
      throw new Error("Not a HexString!");
    }
  }
  if (arg.length !== 64) {
    throw new Error("HexString length was not 64 characters!");
  }
};

assertionFunctions[STRINGHEX128] = function(arg) {
  var k, len1;
  if (typeof arg !== "string") {
    throw new Error("Not a string!");
  }
  for (k = 0, len1 = arg.length; k < len1; k++) {
    c = arg[k];
    if (hexMap[c] == null) {
      throw new Error("Not a HexString!");
    }
  }
  if (arg.length !== 128) {
    throw new Error("HexString length was not 128 characters!");
  }
};

assertionFunctions[BOOLEAN] = function(arg) {
  if (typeof arg !== "boolean") {
    throw new Error("Not a boolean!");
  }
};

assertionFunctions[ARRAY] = function(arg) {
  if (!Array.isArray(arg)) {
    throw new Error("Not an array!");
  }
};

assertionFunctions[NUMBERORNULL] = function(arg) {
  if (arg === null) {
    return;
  }
  if (typeof arg !== "number") {
    throw new Error("Neither a number nor null!");
  }
};

assertionFunctions[STRINGORNULL] = function(arg) {
  if (arg === null) {
    return;
  }
  if (typeof arg !== "string") {
    throw new Error("Neither a number nor null!");
  }
};

//endregion

//###########################################################
export var assertStructureAndTypes = function(body, argumentTypes) {
  var arg, argKeys, bodyKeys, err, i, k, key, label, len1, type;
  bodyKeys = Object.keys(body);
  argKeys = Object.keys(argumentTypes);
  if (bodyKeys.length !== argKeys.length) {
    throw new Error(`Error: The Number of parameters in the body, did not match the expected number. ${argKeys.length} vs ${bodyKeys.length}`);
  }
  for (i = k = 0, len1 = bodyKeys.length; k < len1; i = ++k) {
    key = bodyKeys[i];
    if (key !== argKeys[i]) {
      throw new Error(`Error: parameter @ index: ${i} had wrong key! expected: '${argKeys[i]}'  detected: '${key}'`);
    }
  }
  for (label in body) {
    arg = body[label];
    type = argumentTypes[label];
    try {
      assertionFunctions[type](arg);
    } catch (error) {
      err = error;
      throw new Error(`Error: unexpected format of parameter ${label} - ${err.message}`);
    }
  }
};
