// Generated by CoffeeScript 2.6.1
//###########################################################
export var addNodeId = function(publicKey, timestamp, signature) {
  secretStore.addNodeId(publicKey);
  return {
    ok: true
  };
};


//###########################################################
export var removeNodeId = function(publicKey, timestamp, signature) {
  secretStore.removeNodeId(publicKey);
  return {
    ok: true
  };
};

//###########################################################
export var getSecretSpace = async function(publicKey, timestamp, signature) {
  var encryptedSpace;
  encryptedSpace = (await secretHandler.getEncryptedSecretSpace(publicKey));
  return encryptedSpace;
};

//###########################################################
export var getSecret = function(publicKey, secretId, timestamp, signature) {
  var secret;
  secret = secretStore.getSecret(publicKey, secretId);
  return secret;
};

//###########################################################
export var setSecret = async function(publicKey, secretId, secret, timestamp, signature) {
  await secretHandler.setSecret(publicKey, secretId, secret);
  return {
    ok: true
  };
};

//###########################################################
export var deleteSecret = function(publicKey, secretId, timestamp, signature) {
  secretStore.deleteSecret(publicKey, secretId);
  return {
    ok: true
  };
};

//###########################################################
export var startAcceptingSecretsFrom = async function(publicKey, fromId, timestamp, signature) {
  await secretStore.addSubSpaceFor(publicKey, fromId);
  return {
    ok: true
  };
};

//###########################################################
export var stopAcceptingSecretsFrom = async function(publicKey, fromId, timestamp, signature) {
  await secretStore.removeSubSpaceFor(publicKey, fromId);
  return {
    ok: true
  };
};

//###########################################################
export var shareSecretTo = async function(publicKey, shareToId, secretId, secret, timestamp, signature) {
  await secretHandler.shareSecretTo(publicKey, shareToId, secretId, secret);
  return {
    ok: true
  };
};

//###########################################################
export var deleteSharedSecret = function(publicKey, sharedToId, secretId, timestamp, signature) {
  secretStore.deleteSharedSecret(sharedToId, publicKey, secretId);
  return {
    ok: true
  };
};

//###########################################################
export var addSyncHook = function(publicKey, secretId, serverURL, timestamp, signature) {
  var result;
  result = {};
  /*

  {
  "ok": true
  }

  */
  return result;
};

//###########################################################
export var addNotificationHook = function(publicKey, type, specific, timestamp, signature) {
  var result;
  result = {};
  /*

  {
  "ok": true
  }

  */
  return result;
};

//###########################################################
export var getAuthCode = function(publicKey, timestamp, signature) {
  var result;
  result = {};
  /*

  {
  "ok": true
  }

  */
  return result;
};

//###########################################################
export var addFriendServer = function(authCode, serverURL, serverNodeId) {
  var result;
  result = {};
  /*

  {
  "ok": true
  }

  */
  return result;
};

//###########################################################
export var getNodeId = function(authCode) {
  var result;
  result = {};
  /*

  {
  "publicKey": "...",
  "timestamp": "...",
  "signature": "..."
  }

  */
  return result;
};
