// Generated by CoffeeScript 2.6.1
(function() {
  //###########################################################
  scihandlers.addNodeId = function(publicKey, timestamp, signature) {
    secretStore.addNodeId(publicKey);
    return {
      ok: true
    };
  };

  //###########################################################
  scihandlers.getSecretSpace = async function(publicKey, timestamp, signature) {
    var encryptedSpace;
    encryptedSpace = (await secretHandler.getEncryptedSecretSpace(publicKey));
    return encryptedSpace;
  };

  //###########################################################
  scihandlers.getSecret = function(publicKey, secretId, timestamp, signature) {
    var secret;
    secret = secretStore.getSecret(publicKey, secretId);
    return secret;
  };

  //###########################################################
  scihandlers.setSecret = async function(publicKey, secretId, secret, timestamp, signature) {
    await secretHandler.setSecret(publicKey, secretId, secret);
    return {
      ok: true
    };
  };

  //###########################################################
  scihandlers.deleteSecret = function(publicKey, secretId, timestamp, signature) {
    secretStore.deleteSecret(publicKey, secretId);
    return {
      ok: true
    };
  };

  //###########################################################
  scihandlers.startAcceptingSecretsFrom = async function(publicKey, fromId, timestamp, signature) {
    await secretStore.addSubSpaceFor(publicKey, fromId);
    return {
      ok: true
    };
  };

  //###########################################################
  scihandlers.stopAcceptingSecretsFrom = async function(publicKey, fromId, timestamp, signature) {
    await secretStore.removeSubSpaceFor(publicKey, fromId);
    return {
      ok: true
    };
  };

  //###########################################################
  scihandlers.shareSecretTo = async function(publicKey, shareToId, secretId, secret, timestamp, signature) {
    await secretHandler.shareSecretTo(publicKey, shareToId, secretId, secret);
    return {
      ok: true
    };
  };

  //###########################################################
  scihandlers.deleteSharedSecret = function(publicKey, sharedToId, secretId, timestamp, signature) {
    secretStore.deleteSharedSecret(sharedToId, publicKey, secretId);
    return {
      ok: true
    };
  };

  //###########################################################
  scihandlers.addSyncHook = function(publicKey, secretId, serverURL, timestamp, signature) {
    var result;
    result = {};
    /*

    {
    "ok": true
    }

    */
    return result;
  };

  //###########################################################
  scihandlers.addNotificationHook = function(publicKey, type, specific, timestamp, signature) {
    var result;
    result = {};
    /*

    {
    "ok": true
    }

    */
    return result;
  };

  //###########################################################
  scihandlers.getAuthCode = function(publicKey, timestamp, signature) {
    var result;
    result = {};
    /*

    {
    "ok": true
    }

    */
    return result;
  };

  //###########################################################
  scihandlers.addFriendServer = function(authCode, serverURL, serverNodeId) {
    var result;
    result = {};
    /*

    {
    "ok": true
    }

    */
    return result;
  };

  //###########################################################
  scihandlers.getNodeId = function(authCode) {
    var result;
    result = {};
    /*

    {
    "publicKey": "...",
    "timestamp": "...",
    "signature": "..."
    }

    */
    return result;
  };

}).call(this);
