// Generated by CoffeeScript 2.7.0
//###########################################################
var c, defaultAuthCode, ensure32BytesHex, hexChars, hexMap, i, len;

import {
  Client
} from "./client.js";

import * as secUtl from "secret-manager-crypto-utils";

import * as tbut from "thingy-byte-utils";

//###########################################################
hexChars = "0123456789abcdef";

hexMap = {};

for (i = 0, len = hexChars.length; i < len; i++) {
  c = hexChars[i];
  hexMap[c] = true;
}

defaultAuthCode = "deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef";

//###########################################################
export var createClient = function(o) {
  var authCode, closureDate, err, publicKeyHex, secretKeyHex;
  // console.log(JSON.stringify(o, null, 4))
  if (o.secretKeyHex != null) {
    try {
      secretKeyHex = ensure32BytesHex(o.secretKeyHex);
    } catch (error) {
      err = error;
      throw new Error("error occured in ensuring the correct format of secretKeyHex!\n: " + err.message);
    }
    if (o.publicKeyHex) {
      try {
        publicKeyHex = ensure32BytesHex(o.publicKeyHex);
      } catch (error) {
        err = error;
        throw new Error("error occured in ensureing the correct format of publicKeyHex!\n: " + err.message);
      }
    } else {
      publicKeyHex = null;
    }
    if (o.authCode != null) {
      try {
        authCode = ensure32BytesHex(o.authCode);
      } catch (error) {
        err = error;
        throw new Error("error occured in ensureing the correct format of authCode!\n: " + err.message);
      }
    } else {
      authCode = null;
    }
  } else {
    secretKeyHex = null;
    publicKeyHex = null;
    if (o.authCode != null) {
      try {
        authCode = ensure32BytesHex(o.authCode);
      } catch (error) {
        err = error;
        throw new Error("error occured in ensureing the correct format of authCode!\n: " + err.message);
      }
    } else {
      authCode = defaultAuthCode;
    }
  }
  if (o.closureDate != null) {
    closureDate = o.closureDate;
  } else {
    closureDate = null;
  }
  console.log("hello!");
  return new Client(secretKeyHex, publicKeyHex, o.serverURL, closureDate, authCode);
};

//###########################################################
ensure32BytesHex = function(key) {
  var j, len1;
  // real code to check on client already
  if (key instanceof Uint8Array) {
    if (key.length !== 32) {
      throw new Error("Invalid length!");
    }
    key = tbut.bytesToHex(key);
  }
  if (typeof key !== "string") {
    throw new Error("Invalid type, hexString or Uint8Array expected!");
  }
  if (key.charAt(1) === "x") {
    key = key.slice(2);
  }
  if (key.length !== 64) {
    throw new Error("Invalid length!");
  }
  for (j = 0, len1 = key.length; j < len1; j++) {
    c = key[j];
    if (hexMap[c] == null) {
      throw new Error("Non-hex character!");
    }
  }
  return key;
};
