// Generated by CoffeeScript 2.7.0
//###########################################################
var c, ensureHexKey, hexChars, hexMap, i, len;

import {
  Client
} from "./client.js";

import * as secUtl from "secret-manager-crypto-utils";

import * as tbut from "thingy-byte-utils";

//###########################################################
hexChars = "0123456789abcdef";

hexMap = {};

for (i = 0, len = hexChars.length; i < len; i++) {
  c = hexChars[i];
  hexMap[c] = true;
}

//###########################################################
export var createClient = async function(secretKeyHex, publicKeyHex, serverURL) {
  var kp, pbTestHex;
  if (!secretKeyHex) {
    kp = (await secUtl.createKeyPairHex());
    return new Client(kp.secretKeyHex, kp.publicKeyHex, serverURL);
  } else {
    secretKeyHex = ensureHexKey(secretKeyHex);
  }
  if (!publicKeyHex) {
    publicKeyHex = (await secUtl.createPublicKeyHex(secretKeyHex));
  } else {
    publicKeyHex = ensureHexKey(publicKeyHex);
    pbTestHex = (await secUtl.createPublicKeyHex(secretKeyHex));
    if (publicKeyHex !== pbTestHex) {
      throw new Error("PublicKey does not fit secretKey!");
    }
  }
  return new Client(secretKeyHex, publicKeyHex, serverURL);
};

//###########################################################
ensureHexKey = function(key) {
  var j, len1;
  if (key instanceof Uint8Array) {
    if (key.length !== 32) {
      throw new Error("Invalid key length!");
    }
    key = tbut.bytesToHex(key);
  }
  if (typeof key !== "string") {
    throw new Error("Invalid type, hexString or Uint8Array expected!");
  }
  if (key.charAt(1) === "x") {
    key = key.slice(2);
  }
  if (key.length !== 64) {
    throw new Error("Invalid key length!");
  }
  for (j = 0, len1 = key.length; j < len1; j++) {
    c = key[j];
    if (hexMap[c] == null) {
      throw new Error("Non-hex character in key!");
    }
  }
  return key;
};
